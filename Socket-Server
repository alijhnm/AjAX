from PyQt5 import QtCore, QtGui, QtWidgets
import os, shutil, os.path, threading, socket, json, subprocess
import platform

import PyQt5

if platform.system() == 'Linux' :
    homedir = os.path.join('/home', os.listdir('/home')[0])
    musicicon ="/Icons/Music.png"
    filmicon ="/Icons/Film.png"
    imageicon ="/Icons/Image.png"
    docicon ="/Icons/Doc.png"
    zipicon ="/Icons/Zip.png"
    foldericon ="/Icons/Folder.png"
    fileicon ="/Icons/File.png"
else :
    homedir = 'C:\\'
    musicicon = "\Icons\Music.png"
    filmicon = "\Icons\Film.png"
    imageicon = "\Icons\Image.png"
    docicon = "\Icons\Doc.png"
    zipicon = "\Icons\Zip.png"
    foldericon = "\Icons\Folder.png"
    fileicon = "\Icons\File.png"

project_dir = os.getcwd()
NotFoldersList = None
recent_directories_list = [homedir]
directories = [homedir]
tup = next(os.walk(homedir))
list_of_item = []
list_of_labels = []
dragged_item = []
is_resized = False
message_num = 0
Pasvand_dic = {"Music":[".PCM",".WAV",".SND",".WMA",".FLAC",".MP3",".AAC",".WMA",".OGG"],\
               "Film":[".MKV",".MP4",".MPG",".AVI",".3GP",".MOV",".VOB",".FLV",".WMV",".GIF"],\
               "Picture":[".JPG",".JPEG",".PNG",".GIF",".BMP"],\
               "Docs":[".DOC",".DOCX",".LOG",".MSG",".RTF",".TXT",".WPD",".WPS"],\
               "Copressed":[".ZIP",".RAR"]}


initial_list = [os.path.join(tup[0], i) for i in tup[1] + tup[2]]
selected_file=None
selected_file_to_copy=None
selected_file_to_cut=None
selected_file_to_paste=None


class Ui_MainWindow(QtWidgets.QMainWindow):

    def __init__(self):
        super(Ui_MainWindow, self).__init__()

        #MainWindow
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(700, 520)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(project_dir+"\Icons\Title-icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setToolButtonStyle(QtCore.Qt.ToolButtonTextOnly)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        # Frame
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(0, 0, 10000, 10000))
        self.frame.setAutoFillBackground(True)
        p = self.frame.palette()
        p.setColor(self.frame.backgroundRole(), QtCore.Qt.color0)
        self.frame.setPalette(p)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")


        #QTreeView

        self.model=QtWidgets.QFileSystemModel()
        self.model.setRootPath("")
        self.tree_view=QtWidgets.QTreeView(self.centralwidget)
        self.tree_view.setModel(self.model)
        self.tree_view.setExpandsOnDoubleClick(False)
        self.tree_view.setSelectionMode(QtWidgets.QAbstractItemView.SingleSelection)
        self.tree_view.setAnimated(True)
        self.tree_view.setSortingEnabled(True)
        self.tree_view.setIndentation(20)
        self.tree_view.mouseDoubleClickEvent=self.tree_double_click
        self.tree_view.setGeometry(QtCore.QRect(20, 50, 181, 401))
        self.tree_view.setObjectName("treeWidget")



        #NameLabel
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(380, 0, 181, 51))
        font = QtGui.QFont()
        font.setFamily("Nueva Std Cond")
        font.setPointSize(24)
        font.setBold(True)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(75)
        font.setStrikeOut(False)
        font.setKerning(True)
        font.setStyleStrategy(QtGui.QFont.PreferAntialias)
        self.label.setFont(font)
        self.label.setMouseTracking(True)
        self.label.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.label.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.label.setTextFormat(QtCore.Qt.PlainText)
        self.label.setWordWrap(False)
        self.label.setObjectName("NameLabel")
        self.label.raise_()

        # RecentAdrresses
        self.RecentAdrresses = QtWidgets.QComboBox(self.centralwidget)
        self.RecentAdrresses.setGeometry(QtCore.QRect(240, 50, 390, 20))
        self.RecentAdrresses.setObjectName("RecentAdrresses")
        self.RecentAdrresses.raise_()
        self.RecentAdrresses.activated.connect(lambda: self.Go_to_directory(self.RecentAdrresses.currentText()))


        #AdressBar
        self.AdressBar = QtWidgets.QLineEdit(self.centralwidget)
        self.AdressBar.setGeometry(QtCore.QRect(240, 50, 370, 21))
        self.AdressBar.setStatusTip("")
        self.AdressBar.setWhatsThis("")
        self.AdressBar.setInputMethodHints(QtCore.Qt.ImhNone)
        self.AdressBar.setText("")
        self.AdressBar.setObjectName("lineEdit")
        self.AdressBar.raise_()

        #BackButton
        self.BackButton = QtWidgets.QPushButton(self.centralwidget)
        self.BackButton.setGeometry(QtCore.QRect(207, 46, 30, 30))
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(project_dir+"/Icons/Back.png"))
        self.BackButton.setIcon(icon1)
        self.BackButton.setIconSize(QtCore.QSize(20, 15))
        self.BackButton.setDefault(False)
        self.BackButton.setFlat(True)
        self.BackButton.setObjectName("BackButton")
        self.BackButton.clicked.connect(self.Back)
        self.BackButton.raise_()

        #SearchButton
        self.SearchButton = QtWidgets.QPushButton(self.centralwidget)
        self.SearchButton.setGeometry(QtCore.QRect(670, 50, 22, 22))
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(project_dir+"/Icons/Search.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.SearchButton.setIcon(icon2)
        self.SearchButton.setIconSize(QtCore.QSize(22, 22))
        self.SearchButton.setDefault(False)
        self.SearchButton.setFlat(True)
        self.SearchButton.setObjectName("SearchButton")
        self.SearchButton.clicked.connect(lambda: self.Search(os.getcwd(), self.AdressBartext()))
        MainWindow.setCentralWidget(self.centralwidget)

        #GoButton
        self.GoButton = QtWidgets.QPushButton(self.centralwidget)
        self.GoButton.setGeometry(QtCore.QRect(640, 50, 22, 22))
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(project_dir+"/Icons/Go.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.GoButton.setIcon(icon2)
        self.GoButton.setIconSize(QtCore.QSize(20, 20))
        self.GoButton.setDefault(False)
        self.GoButton.setFlat(True)
        self.GoButton.setObjectName("GoButton")
        self.GoButton.clicked.connect(self.go_button)

        #Chat_Button
        self.Chat_Button = QtWidgets.QPushButton(self.centralwidget)
        self.Chat_Button.setGeometry(QtCore.QRect(25, 10, 50, 30))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(project_dir + "/Icons/Chat.ico"))
        self.Chat_Button.setIcon(icon)
        self.Chat_Button.setIconSize(QtCore.QSize(40, 40))
        self.Chat_Button.setAutoDefault(False)
        self.Chat_Button.setDefault(False)
        self.Chat_Button.setFlat(True)
        self.Chat_Button.setObjectName("pushButton")
        self.Chat_Button.clicked.connect(self.resize)


        #connect_button
        self.Connect_Button = QtWidgets.QPushButton(self.centralwidget)
        self.Connect_Button.setGeometry(QtCore.QRect(90, 10, 50, 30))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(project_dir + "/Icons/Connect.png"))
        self.Connect_Button.setIcon(icon)
        self.Connect_Button.setIconSize(QtCore.QSize(40, 40))
        self.Connect_Button.setAutoDefault(False)
        self.Connect_Button.setDefault(False)
        self.Connect_Button.setFlat(True)
        self.Connect_Button.setObjectName("pushButton")
        self.Connect_Button.clicked.connect(self.StartServer)


        #switch_button
        self.Switch_Button = QtWidgets.QPushButton(self.centralwidget)
        self.Switch_Button.setGeometry(QtCore.QRect(150, 10, 50, 30))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(project_dir + "/Icons/Switch2.png"))
        self.Switch_Button.setIcon(icon)
        self.Switch_Button.setIconSize(QtCore.QSize(40, 40))
        self.Switch_Button.setAutoDefault(False)
        self.Switch_Button.setDefault(False)
        self.Switch_Button.setFlat(True)
        self.Switch_Button.setObjectName("pushButton")
        self.Switch_Button.clicked.connect(self.switch_button)


        #Status_Bar
        self.Status_Bar = QtWidgets.QLabel(self.centralwidget)
        self.Status_Bar.setGeometry(QtCore.QRect(30, 435, 181, 51))


        # TableWidget
        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget.setGeometry(QtCore.QRect(210, 80, 481, 370))
        self.tableWidget.setGridStyle(QtCore.Qt.NoPen)
        self.tableWidget.setObjectName("tableWidget")


        # contextMenu Policy
        self.tableWidget.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)
        self.tableWidget.customContextMenuRequested.connect(self.show_context)


        # setting menu actions
        self.popupMenu = QtWidgets.QMenu(self)
        self.popupMenu.addAction(QtWidgets.QAction('New Folder', self, triggered=self.MakeDir))
        self.popupMenu.addAction(QtWidgets.QAction('Coming soon...', self, triggered=self.copyact))
        self.popupMenu.addAction(QtWidgets.QAction('Coming soon...', self, triggered=self.cutact))
        self.popupMenu.addSeparator()
        self.popupMenu.addAction(QtWidgets.QAction('Exit', self, triggered=self.Exit))


        #Menu
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 721, 21))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuEdit = QtWidgets.QMenu(self.menubar)
        self.menuEdit.setObjectName("menuEdit")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionOpen = QtWidgets.QAction(MainWindow)
        self.actionOpen.setObjectName("actionOpen")
        self.actionQuit = QtWidgets.QAction(MainWindow)
        self.actionQuit.setObjectName("actionQuit")
        self.actionCopy_Crtl_C = QtWidgets.QAction(MainWindow)
        self.actionCopy_Crtl_C.setObjectName("actionCopy_Crtl_C")
        self.actionPaste_Ctrl_V = QtWidgets.QAction(MainWindow)
        self.actionPaste_Ctrl_V.setObjectName("actionPaste_Ctrl_V")
        self.actionExit = QtWidgets.QAction(MainWindow)
        self.actionExit.setObjectName("actionExit")
        self.actionCopy = QtWidgets.QAction(MainWindow)
        self.actionCopy.setObjectName("actionCopy")
        self.actionCut = QtWidgets.QAction(MainWindow)
        self.actionCut.setObjectName("actionCut")
        self.actionPaste = QtWidgets.QAction(MainWindow)
        self.actionPaste.setObjectName("actionPaste")
        self.actionZip = QtWidgets.QAction(MainWindow)
        self.actionZip.setObjectName("actionZip")
        self.menuFile.addAction(self.actionOpen)
        self.menuFile.addSeparator()
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionExit)
        self.menuEdit.addAction(self.actionCopy)
        self.menuEdit.addAction(self.actionCut)
        self.menuEdit.addAction(self.actionPaste)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionZip)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuEdit.menuAction())
        self.actionOpen.setShortcut('Ctrl+O')
        self.actionOpen.triggered.connect(self.action_open)
        self.actionQuit.setShortcut('Ctrl+Q')
        self.actionQuit.triggered.connect(self.action_quit)
        self.actionExit.setShortcut("Ctrl+E")
        self.actionExit.triggered.connect(self.action_exit)
        self.actionCopy.setShortcut("Ctrl+C")
        self.actionCopy.triggered.connect(self.action_copy)
        self.actionCut.setShortcut("Ctrl+X")
        self.actionCut.triggered.connect(self.action_cut)
        self.actionPaste.setShortcut("Ctrl+V")
        self.actionPaste.triggered.connect(self.action_paste)
        self.actionZip.setObjectName("actionZip")
        self.actionZip.triggered.connect(self.action_zip)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)


        #messenger
        self.listWidget = QtWidgets.QListWidget(self.centralwidget)
        self.listWidget.setGeometry(QtCore.QRect(700, 80, 256, 351))
        self.listWidget.setObjectName("listWidget")
        self.messenge_line = QtWidgets.QLineEdit(self.centralwidget)
        self.messenge_line.setGeometry(QtCore.QRect(700, 430, 215, 23))
        self.messenge_line.setSizeIncrement(QtCore.QSize(0, 0))
        self.messenge_line.setFrame(True)
        self.messenge_line.setEchoMode(QtWidgets.QLineEdit.Normal)
        self.messenge_line.setObjectName("lineEdit")
        self.messenge_line.insert("Write here ...")
        self.messenge_line.mousePressEvent =  self.lineClear
        self.send_Button = QtWidgets.QPushButton(self.centralwidget)
        self.send_Button.setGeometry(QtCore.QRect(910, 430, 47, 23))
        self.send_Button.setAutoDefault(False)
        self.send_Button.setDefault(False)
        self.send_Button.setFlat(False)
        self.send_Button.setObjectName("pushButton")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(project_dir + "/Icons/Send.png"))
        self.send_Button.setIcon(icon)
        self.send_Button.setIconSize(QtCore.QSize(20, 20))
        self.send_Button.setAutoDefault(False)
        self.send_Button.setDefault(False)
        self.send_Button.setFlat(True)
        self.messenge = QtWidgets.QPushButton(self.centralwidget)
        self.messenge.setGeometry(QtCore.QRect(700, 30, 255, 40))
        self.messenge.setIconSize(QtCore.QSize(50, 50))
        self.messenge.setFlat(True)
        self.messenge.setObjectName("pushButton_2")
        self.send_Button.clicked.connect(lambda :self.send_message("You",self.messenge_line.text()))
        font = QtGui.QFont()
        font.setPointSize(25)
        self.messenge.setFont(font)
        self.messenge.setText("messenger")
        MainWindow.setCentralWidget(self.centralwidget)
        MainWindow.setStatusBar(self.statusbar)
        self.listWidget.setSortingEnabled(False)

        # Connections
        self.connected = False
        self.OSanswer = None
        self.open_after_receive = False
        self.last_client_dir = None
        # Root
        self.root = ["ServerPC", "ClientPC"]

        #CallFunctions
        self.show_items(initial_list)
        self.recent_directories()
        self.retranslateUi(MainWindow)
        self.Status(str(directories[-1]))


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "File Manager"))

        self.label.setText(_translate("MainWindow", "File Manager"))
        self.AdressBar.setAccessibleName(_translate("MainWindow", "address bar"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuEdit.setTitle(_translate("MainWindow", "Edit"))
        self.actionOpen.setText(_translate("MainWindow", "open"))
        #self.actionOpen.clicked.connect(lambda :OpenFile("*","*"))
        #self.actionNew_file.clicked.connect(lambda: NewFile("*", "*"))
        self.actionQuit.setText(_translate("MainWindow", "Quit"))
        #self.actionQuit.clicked.connect(lambda: Quit("*", "*"))
        self.actionCopy_Crtl_C.setText(_translate("MainWindow", "Copy"))
        #self.actionCopy_Crtl_C.clicked.connect(lambda: CopyFile("*", "*"))
        self.actionPaste_Ctrl_V.setText(_translate("MainWindow", "Paste"))
        #self.actionPaste_Ctrl_V.clicked.connect(lambda: PasteFile("*", "*"))
        self.actionExit.setText(_translate("MainWindow", "Exit"))
        #self.actionExit.clicked.connect(lambda: QuitFile("*", "*"))
        self.actionCopy.setText(_translate("MainWindow", "Copy"))
        self.actionCut.setText(_translate("MainWindow", "Cut"))
        self.actionPaste.setText(_translate("MainWindow", "Paste"))
        self.actionZip.setText(_translate("MainWindow", "Zip"))
        #self.actionZip.clicked.connect(lambda: ZipFile("*", "*"))



    #definingFunctions
    def lineClear(self,event):
        if message_num == 0:
            self.messenge_line.clear()

    def Status(self , s):
        self.Status_Bar.setText(s)

    def resize(self):
        global is_resized
        if is_resized:
            MainWindow.resize(700, 520)
            is_resized = False
        else:
            MainWindow.resize(970, 520)
            is_resized = True


    def setHeader(self,rows):
        self.tableWidget.setColumnCount(4)
        self.tableWidget.setRowCount(rows)
        self.tableWidget.verticalHeader().setVisible(False)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(3, item)
        self.tableWidget.horizontalHeader().setDefaultSectionSize(115)
        Name = self.tableWidget.horizontalHeaderItem(0)
        Name.setText(QtCore.QCoreApplication.translate("MainWindow", "Name"))
        Date_modified = self.tableWidget.horizontalHeaderItem(1)
        Date_modified.setText(QtCore.QCoreApplication.translate("MainWindow", "Date Modified"))
        Type = self.tableWidget.horizontalHeaderItem(2)
        Type.setText(QtCore.QCoreApplication.translate("MainWindow", "Type"))
        Size = self.tableWidget.horizontalHeaderItem(3)
        Size.setText(QtCore.QCoreApplication.translate("MainWindow", "Size"))



    def show_items(self, lst):
        global list_of_item,list_of_labels
        list_of_item = []
        self.tableWidget.clear()
        self.setHeader(len(lst))
        for j,Item in enumerate(lst) :
            self.item = [ Item ,"Date",os.path.splitext(Item)[1], "size"]
            for i in range(4):
                self.ITEM = QtWidgets.QTableWidgetItem()
                self.ITEM.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsDragEnabled | QtCore.Qt.ItemIsEnabled)
                self.tableWidget.setItem(j, i, self.ITEM)
                self.ITEM.setText(QtCore.QCoreApplication.translate("MainWindow", str(self.item[i])))
                if i > 0 :
                    self.ITEM.setText(QtCore.QCoreApplication.translate("MainWindow", str(self.item[i])))
                    font = QtGui.QFont()
                    font.setItalic(True)
                    font.setStrikeOut(False)
                    font.setStyleStrategy(QtGui.QFont.NoAntialias)
                    self.ITEM.setFont(font)
                    self.ITEM.setTextAlignment(4)
                    list_of_labels.append(self.ITEM)
                else:
                    self.ITEM.setText(QtCore.QCoreApplication.translate("MainWindow", str(os.path.split(self.item[i])[1])))
                    self.tableWidget.mouseDoubleClickEvent = self.selected_item
                    list_of_item.append(self.item + [self.ITEM])
                    self.Show_Icons()


    def getext(self,path):
        if os.path.isfile(path):
            return os.path.splitext(path)[1]
        else:
            return "F"


    def Show_Icons(self):
        if self.item[2].upper() in Pasvand_dic["Music"]:
            Icon = QtGui.QIcon()
            Icon.addPixmap(QtGui.QPixmap((project_dir+musicicon)))
            self.ITEM.setIcon(Icon)
        elif self.item[2].upper() in Pasvand_dic["Film"]:
            Icon = QtGui.QIcon()
            Icon.addPixmap(QtGui.QPixmap(project_dir+filmicon))
            self.ITEM.setIcon(Icon)
        elif self.item[2].upper() in Pasvand_dic["Picture"]:
            Icon = QtGui.QIcon()
            Icon.addPixmap(QtGui.QPixmap((project_dir +imageicon)))
            self.ITEM.setIcon(Icon)
        elif self.item[2].upper() in Pasvand_dic["Docs"]:
            Icon = QtGui.QIcon()
            Icon.addPixmap(QtGui.QPixmap((project_dir+docicon)))
            self.ITEM.setIcon(Icon)
        elif self.item[2].upper() in Pasvand_dic["Copressed"]:
            Icon = QtGui.QIcon()
            Icon.addPixmap(QtGui.QPixmap((project_dir+zipicon)))
            self.ITEM.setIcon(Icon)
        elif not os.path.isfile(self.item[0]) :
            Icon = QtGui.QIcon()
            Icon.addPixmap(QtGui.QPixmap((project_dir+foldericon)))
            self.ITEM.setIcon(Icon)
        else:
            Icon = QtGui.QIcon()
            Icon.addPixmap(QtGui.QPixmap((project_dir+fileicon)))
            self.ITEM.setIcon(Icon)



        # defining func1 action

    def Exit(self):
        sys.exit(app.exec_())

        print('test1 action done')

            # defining func2 action

    def func2(self):
        print('test2 action done')

            # defining newfolder action

    def newact(self ) : #, filename = 'New Folder'):
        os.mkdir(os.path.join(os.getcwd() , 'New Folder'))
        self.show()

        print('NewFolder act done')

            # defining copy action

    def copyact(self):
        print('Copy act done')

            # defining cut action

    def cutact(self):
        print('Cut act done')

            # showing context menu

    def show_context(self, event):
        self.popupMenu.exec_(self.tableWidget.mapToGlobal(QtCore.QPoint(event)))


    def Search(self, dir, file_or_dirname):
        """Searches for file_or_dir_name in directory and its subdirectories"""
        global selected_file_to_paste
        selected_file_to_paste=None
        searching_for = file_or_dirname.lower()
        search_generator = os.walk(dir)
        search_result = []
        while True:
            try:
                gen_result = next(search_generator)
                found = gen_result[1] + gen_result[2]
                for i in range(len(found)):
                    found_result = found[i].lower()
                    if searching_for in found_result:
                        search_result.append(os.path.join(gen_result[0], found[i]))
            except :
                self.Status("No file found")
                break
        self.show_items(search_result)

    def OpenFile(self, file_path):
        if platform.system() == 'Linux':
            subprocess.call(('xdg-open', file_path))
        else:
            os.startfile()

    def go_button(self):
        """Handles go button. If the path given to line edit is a dir shows dirs contents.
        If it is a file, Opens the file"""
        path = self.AdressBar.text()
        if os.path.isfile(path):
            self.OpenFile(path)
        else:
            try:
                self.Go_to_directory(path)
            except:
                self.show_items([])
                self.Status("No directory exist")

    def CopyFile(self, file_path, target_path):
        """Copies the file file_path to the file or directory target_path.
         File_path and target_path should be strings.
         If file_path specifies a directory,the file will be copied into
         target_path using the base filename from file_path"""
        func = lambda : shutil.copy2(file_path, target_path)
        copy_thread = threading.Thread(target = func)
        copy_thread.start()

    def RenameFile(self, old_name, new_name):
        """Renames file old_name to new_name. new_name and old_name are either names
           at current working directory or full paths.
           If new name is a directory at a different path file will not rename"""
        try:
            os.rename(old_name, new_name)
        except OSError:
            pass

    def RemoveFile(self, file_path):
        """Deletes file file_path"""
        os.remove(file_path)

    def RemoveDir(self, dir_path):
        """Removes an entire directory"""
        shutil.rmtree(dir_path)

    def CutFile(self, file_path, target_path):
        """Cuts a file from file_path and pastes it at target_path"""
        shutil.move(file_path, target_path)

    def MakeZip(self, dir, target_path, name):
        """Compreses a dir at dir_path into a zip file and moves it to target_path"""
        tmp_dir = os.getcwd()
        os.chdir(target_path)
        shutil.make_archive(name, 'zip', dir, dir)
        os.chdir(tmp_dir)

    def ExtractZip(self, archieve_path, extract_path):
        """Extracts a zip file from archieve_path to extract_path"""
        shutil.unpack_archive(archieve_path, extract_path)



    def MakeDir(self):
        """Makes a new directory at current working directory. If path is provided,
         the new directory will be created there"""
        if self.root[0] == "ServerPC":
            new_dir_path = os.path.join(os.getcwd(), 'New Folder')
            temp = 1
            while True:
                try:
                    os.mkdir(new_dir_path)
                    break
                except FileExistsError:
                    if temp > 1:
                        new_dir_path = new_dir_path[:-1]
                    new_dir_path += str(temp)
                    temp += 1
        else:
            self.client_CMD_socket.send(json.dumps({"MKDIR":self.last_client_dir}).encode())

#        gen = os.walk(os.getcwd())
#        tup = next(gen)
#        lst = [os.path.join(tup[0], i) for i in tup[1] + tup[2]]
#        self.show_items(lst)
#        del temp
#        del new_dir_path
#        del gen

    def selected_item(self,event):
        """select $ drag files"""
        global selected_file, selected_file_to_paste
        for item in list_of_item:
            if item[4].isSelected():
                self.CheckFileExe(item[0])
                break


    def recent_directories(self):
        """show 5 last directories"""
        recent_set = {"1"}
        self.RecentAdrresses.clear()
        recent_directories_list_reversed = recent_directories_list[-20:]
        recent_directories_list_reversed.reverse()
        for i in recent_directories_list_reversed:
            recent_set.add(i)
        recent_set.remove("1")
        for i,directory in enumerate(recent_set):
            self.RecentAdrresses.insertItem(i,directory)


    def Go_to_directory(self,address):
        """Changes the current working directory to address.
           Also makes necessary changes to files shown"""
        global selected_file,selected_file_to_paste
        if not os.path.isfile(address):
            selected_file_to_paste = address
        recent_directories_list.append(address)
        directories.append(address)
        selected_file=None
        self.AdressBar.clear()
        self.AdressBar.insert(address)
        try:
            os.chdir(address)
            self.Status(str(directories[-1]))
        except:
            self.Status(s = "No directory exist")
            return None
        gen = os.walk(os.getcwd())
        tup = next(gen)
        lst = [os.path.join(tup[0], i) for i in tup[1] + tup[2]]
        self.show_items(lst)
        del gen
        self.recent_directories()

    def Back(self):
        """Returns to parent directory of current working directory.
           Also makes necessary changes to files shown and line_edit"""
        global selected_file_to_paste
        if not os.path.isfile(os.path.dirname(os.getcwd())):
            selected_file_to_paste = os.path.dirname(os.getcwd())
        back_path = os.path.dirname(os.getcwd())
        os.chdir(back_path)
        gen = os.walk(os.getcwd())
        tup = next(gen)
        lst = [os.path.join(tup[0], i) for i in tup[1] + tup[2]]
        del gen
        self.show_items(lst)
        self.AdressBar.setText(back_path)

    def CheckFileExe(self, path):
        if self.root[0] == "ServerPC":
            if os.path.isfile(path):
                self.OpenFile(path)
            else:
                self.Go_to_directory(path)
                self.AdressBar.setText((path))
        else:
            self.client_CMD_socket.send(json.dumps({"REQOS":"os.path.isfile(r'" + path + "')"}).encode())
            while self.OSanswer is None:
                pass
            if self.OSanswer:
                self.client_CMD_socket.send(json.dumps({"SENDFILE":path}).encode())
                self.open_after_receive = True
            else:
                self.client_CMD_socket.send(json.dumps({"REQDIR":path}).encode())
                self.AdressBar.setText(path)
                self.last_client_dir = path
            self.OSanswer = None


    def tree_double_click(self,event):
        """Handle the event of clicking on the items of Treeview"""
        global selected_file_to_paste
        if event.button()==QtCore.Qt.LeftButton :
            try:
                if os.path.isfile(self.model.filePath(self.tree_view.currentIndex())):
                    self.OpenFile(self.model.filePath(self.tree_view.currentIndex()))
                else:
                    if self.tree_view.isExpanded(self.tree_view.currentIndex()):
                        self.tree_view.collapse(self.tree_view.currentIndex())
                    else:
                        self.tree_view.expand(self.tree_view.currentIndex())
                    selected_file_to_paste=self.model.filePath(self.tree_view.currentIndex())
                    self.Go_to_directory(self.model.filePath(self.tree_view.currentIndex()))
            except:
                pass

    # functions for the menu actions such open , copy , cut , paste
    def action_open(self):
        if selected_file != None:
            os.startfile(selected_file)


    def action_quit(self):
        MainWindow.close()

    def action_exit(self):
        MainWindow.close()

    def action_copy(self):
        global selected_file_to_copy, selected_file_to_cut
        if selected_file != None:
            selected_file_to_copy = selected_file
            selected_file_to_cut = None

    def action_cut(self):
        global selected_file_to_cut, selected_file_to_copy
        if selected_file != None:
            selected_file_to_cut = selected_file
            selected_file_to_copy = None

    def action_paste(self):
        if selected_file_to_paste != None:
            if selected_file_to_copy != None:
                try:
                    self.CopyFile(selected_file_to_copy, selected_file_to_paste)
                except:
                    pass
            if selected_file_to_cut != None:
                try:
                    self.CutFile(selected_file_to_cut, selected_file_to_paste)
                except:
                    pass

    def action_zip(self):
        if selected_file != None:
            if not os.path.isfile(selected_file):
                self.MakeZip(selected_file, selected_file, selected_file)


    def thread_function(self):
        self.server_socket = socket.socket()
        host = '192.168.43.17'
        port_FIL = 12442
        self.server_socket.bind((host, port_FIL))
        self.server_socket.listen(5)
        print("Waiting for connection")
        conn1, addr1 = self.server_socket.accept()
        conn2, addr2 = self.server_socket.accept()
        conn3, addr3 = self.server_socket.accept()
        response = input("Accept connection ? ")
        if response == "n" or response == "N":
            self.client_MSG_socket.send("REJ".encode())
            conn1.close()
            conn2.close()
            conn3.close()
            print("Rejected")
        elif response == "Y" or response == "y":
            self.client_FIL_socket = conn1
            self.client_MSG_socket = conn2
            self.client_CMD_socket = conn3
            self.client_MSG_socket.send("ACC".encode())
            self.receive_FIL_thread = threading.Thread(target = self.receive_FIL_function)
            self.receive_MSG_thread = threading.Thread(target = self.receive_MSG_function)
            self.receive_CMD_thread = threading.Thread(target = self.receive_CMD_function)
            self.receive_FIL_thread.start()
            self.receive_CMD_thread.start()
            self.receive_MSG_thread.start()
            print("Connected sucessfully")
        else:
            print("Invalid entry")


    def send_message(self,SC ,Mess):
        global message_num
        _translate = QtCore.QCoreApplication.translate
        item = QtWidgets.QListWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(16)
        item.setFont(font)
        if SC == "You":
            item.setTextAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignVCenter)
            brush = QtGui.QBrush(QtGui.QColor(0, 170, 255))
            brush.setStyle(QtCore.Qt.Dense6Pattern)
            item.setBackground(brush)
            brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
            brush.setStyle(QtCore.Qt.Dense1Pattern)
            item.setForeground(brush)
            self.client_MSG_socket.send((Mess.encode()))
        item.setFlags(QtCore.Qt.ItemIsDragEnabled | QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled)
        self.listWidget.addItem(item)
        self.listWidget.setSortingEnabled(False)
        item = self.listWidget.item(message_num)
        item.setText(_translate("MainWindow", Mess))
        self.messenge_line.clear()
        message_num += 1

    def receive_FIL_function(self):
        while True:
            try:
                extension = self.client_FIL_socket.recv(1024)
                print(extension)
                extension = extension.decode()
                f = open('received_file' + extension, 'wb')
                while True:
                    print('receiving data...')
                    data = self.client_FIL_socket.recv(1024)
                    print('data=%s', (data))
                    try:
                        print(data[-3:].decode(), data[:-3])
                        if data[-3:].decode() == "End":
                            f.write(data[:-3])
                            f.close()
                            break
                        else:
                            f.write(data)
                    except:
                        f.write(data)
                print("Recieved file")
                if self.open_after_receive:
                    self.OpenFile("received_file" + extension)
                    self.open_after_receive = False
                del extension
                del data
            except:
                pass




    def receive_CMD_function(self):
        while True:
            raw = self.client_CMD_socket.recv(131072)
            try:
                command = json.loads(raw.decode())
                print(command , type(command))
                keys = list(command.keys())
                if keys[0] == "SHOW":
                    self.initial_list_2 = command["SHOW"]
                    print(self.initial_list_2)
                    self.show_items(self.initial_list_2)
                elif keys[0] == "SENDFILE":
                    string = "Accept transfer of " + command["SENDFILE"] + " ?(y/n)"
                    permission = input(string)
                    if permission == "y" or permission == "Y":
                        self.send_file(command["SENDFILE"])
                    else:
                        print("Rejected")
                elif keys[0] == "REQDIR":
                    if command["REQDIR"] == 'homedir':
                        gen = os.walk(homedir)
                        try:
                            tup = next(gen)
                            contents = [os.path.join(tup[0], i) for i in (tup[1] + tup[2])]
                        except:
                            contents = []
                    else:
                        gen = os.walk(command["REQDIR"])
                        try:
                            tup = next(gen)
                            contents = [os.path.join(tup[0], i) for i in (tup[1] + tup[2])]
                        except:
                            contents = []
                    dict = {"SHOW": contents}
                    data = json.dumps(dict).encode()
                    self.client_CMD_socket.send(data)
                    del gen
                elif keys[0] == "REQOS":
                    answer = eval(command["REQOS"])
                    self.client_CMD_socket.send(json.dumps({"ANSOS": answer}).encode())
                elif keys[0] == "ANSOS":
                    self.OSanswer = command["ANSOS"]
                elif keys[0] == "MKDIR":
                    new_dir_path = os.path.join(command["MKDIR"], 'New Folder')
                    temp = 1
                    while True:
                        try:
                            os.mkdir(new_dir_path)
                            break
                        except FileExistsError:
                            if temp > 1:
                                new_dir_path = new_dir_path[:-1]
                            new_dir_path += str(temp)
                            temp += 1
                    gen = os.walk(command["MKDIR"])
                    try:
                        tup = next(gen)
                        contents = [os.path.join(tup[0], i) for i in (tup[1] + tup[2])]
                    except:
                        contents = []
                    self.client_CMD_socket.send(json.dumps({'SHOW':contents}).encode())
                    del raw
            except:
                pass
    def receive_MSG_function(self):
        while True :
            mess = self.client_MSG_socket.recv(1024).decode()
            self.send_message("Other",mess)
    
    def StartServer(self):
        self.start_server_thread = threading.Thread(target = self.thread_function)
        self.start_server_thread.start()

    def switch_button(self):
        self.root[0], self.root[1] = self.root[1], self.root[0]
        if self.root[0] == "ServerPC":
            self.show_items(initial_list)
        else:
            self.client_CMD_socket.send(json.dumps({"REQDIR":'homedir'}).encode())
        self.last_client_dir = homedir


    def send_file(self, file_dir):
        extension = "." + file_dir.split(".")[-1]
        self.client_FIL_socket.send(extension.encode())
        file = open(file_dir, "rb")
        part = file.read(1024)
        while part:
            self.client_FIL_socket.send(part)
            print("sending in progress", repr(part))
            part = file.read(1024)
        self.client_FIL_socket.send("End".encode())
        print("succesfully sent")
        file.close()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    #ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
